// 面试题
import { tagMnum } from './tag'
export default [
  {
    id: 1,
    title: 'H5和小程序有什么相同及不同的地方吗？',
    tags: [tagMnum.html, tagMnum.wx],
    answer: [
      '运行环境的不同',
      'H5运行环境为浏览器',
      '浏览器具有跨平台性（同时兼容PC端、移动端、Windows、Linux、Android与ios）',
      '容易发布，无需审核',

      '微信小程序运行环境为微信App',
      '用户体验好,使用体验比H5更加流畅，',
      '可以获取的系统级权限更多，功能更为强大',
      '只能在微信app内运行',
      '受微信管控，功能的开发取决于微信的赋能',
    ]
  },
  {
    id: 2,
    title: '重绘和回流是什么？',
    tags: [tagMnum.html, tagMnum.css],
    answer: [
      '我们都知道一个页面从加载到完成，首先是构建DOM树，然后根据DOM节点进行几何布局形成render树(渲染树)，当渲染树构建完成后，页面就根据DOM树开始布局，渲染树也根据设置的样式渲染这些节点。',
      '',
      '回流（Reflow）',
      '上面我们知道，我们会根据 渲染树 去遍历渲染，所以当我们的节点发生改变时，浏览器重新渲染部分节点或者全部文档，我们称这个过程为回流',
      '大致整理会导致回流的一些操作',
      '1、页面首次渲染',
      '2、浏览器窗口大小发生改变',
      '3、元素尺寸或位置发生改变',
      '4、元素内容变化（文字数量或图片大小等等）',
      '5、元素字体大小变化',
      '6、添加或者删除可见的DOM元素',
      '7、激活CSS伪类（例如：:hover）',
      '8、查询某些属性或调用某些方法',
      '',
      '重绘（Repaint）',
      '当我们操作的节点上的元素并不导致元素位置发生变化时，比如color,background-color,visibility(注意虽然节点隐藏了，但是元素还在，并且位置也不会发生变化),浏览器会将新的样式赋值给这些节点，我们称这个过程为重绘',
      '',
      '我们把页面文档比作一个积木的话，我们抽离中间或者底部的一个积木块，我们的积木会重新找到重心并且稳固下来，我们把这个过程称之为回流',
      '我们在某个积木上涂上颜色，这并不会造成整个积木的稳定，我们把这个过程叫做重绘',
      '所以说回流一定会触发重绘，重绘不一定触发回流。',
    ]
  },
  {
    id: 3,
    title: '如何避免重绘与回流？',
    tags: [tagMnum.html, tagMnum.css, tagMnum.optimize],
    answer: [
      '1、避免使用 table 布局。',
      '2、尽可能在 DOM 树的最末端改变 class。',
      '3、避免设置多层内联样式。',
      '4、将动画效果应用到 position 属性为 absolute 或 fixed 的元素上。',
      '5、避免使用CSS表达式（例如：calc()）。',
      '6、避免频繁操作样式，最好一次性重写 style 属性，或者将样式列表定义为 class 并一次性更改 class 属性。',
      '7、避免频繁操作 DOM ，把DOM离线后修改，创建一个 documentFragment ，在它上面应用所有 DOM 操作，最后再把它添加到文档中。',
      '8、也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。',
      '9、避免频繁读取会引发回流 / 重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。',
      '10、对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。'
    ]
  }
]